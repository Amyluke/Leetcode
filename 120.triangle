Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]


class Solution {
    //top-down卡住的点：return anwser ; initialize 时行数与列数对应,故只用一个n既可以表示坐标
    public int minimumTotal(List<List<Integer>> triangle) {
        //for every node, it comes from [x-1][y],[x-1][y-1]
        if(triangle==null || triangle.size()==0 || triangle.get(0).size()==0){
            return 0;
        }
        int res = Integer.MAX_VALUE;
        int n = triangle.size();
        int[][] f = new int[n][n];
        f[0][0]=triangle.get(0).get(0);
        //initialize the left and right-most 
        for(int i= 1; i<n; i++){
            f[i][0]=f[i-1][0]+triangle.get(i).get(0);
            f[i][i]=f[i-1][i-1]+triangle.get(i).get(i);
        }
        for(int i =2; i<n;i++){
            for(int j = 1; j<i; j++){
                f[i][j] = Math.min(f[i-1][j],f[i-1][j-1])+triangle.get(i).get(j);
            }
        }
         int i = n-1;
        for (int j =0; j<n; j++){
                if(f[i][j]<res){
                    res=f[i][j];
                }
            }
        return res;       
    }
}

class Solution {
    //bottom-up
    public int minimumTotal(List<List<Integer>> triangle) {
        //for every node, it comes from [x-1][y],[x-1][y-1]
        if(triangle==null || triangle.size()==0 || triangle.get(0).size()==0){
            return -1;
        }
        int n = triangle.size();
        int[][] f = new int[n][n];
       
         for (int j =0; j<n; j++){
            f[n-1][j]=triangle.get(n-1).get(j);
            }
      
        for(int i =n-2; i>=0;i--){
            for(int j = 0; j<=i; j++){
                f[i][j] = Math.min(f[i+1][j],f[i+1][j+1])+triangle.get(i).get(j);
            }
        }
       return f[0][0];   
    }
}
