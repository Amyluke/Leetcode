Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. 
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.
Example 1:
Input:
11110
11010
11000
00000
Output: 1

/**
method1: 
BFS: use a queue to store islands
   bug1: grid---->node.i and node.j, not i and j
   bug2: new Node -----> node.i and node.j, not i and j
   bug3: not only move right and move down ---> 
         1 1          1 0 1
         0 1          1 1 1 
         1 1
**/
class Solution {
    public int numIslands(char[][] grid) {
       if(grid==null || grid.length==0 || grid[0].length==0){
           return 0;
       } 
        int count = 0;
        for(int i =0; i<grid.length; i++){
            for(int j = 0; j< grid[0].length; j++){
                if(grid[i][j]=='1'){   //if it is an island, traverse by BFS 
                    count++;
                    traverseBFS(grid, i, j);
                }
            }
        }
        return count;
    }
    // move around; 
    // change the visited node to '0', so when the main method moves around, no duplicate
   
    public void traverseBFS(char[][] grid, int i, int j){        
        if(i<0 || j<0 || i>grid.length-1 && j>grid[0].length-1){ //if it is out of bound
            return;
        }
        grid[i][j]='0';
        Queue<Node> queue = new LinkedList();
        queue.offer(new Node(i,j));
        while(!queue.isEmpty()){
                Node node = queue.poll(); 
                if(node.i>0 && grid[node.i-1][node.j]=='1'){ //move up
                    queue.offer(new Node(node.i-1,node.j));
                    grid[node.i-1][node.j]='0';
                }
                if(node.i<grid.length-1 && grid[node.i+1][node.j]=='1'){ //move down
                    queue.offer(new Node(node.i+1,node.j));
                    grid[node.i+1][node.j]='0';
                }
                if(node.j>0 && grid[node.i][node.j-1]=='1'){ //move left
                    queue.offer(new Node(node.i,node.j-1));
                    grid[node.i][node.j-1]='0';
                }
                if(node.j<grid[0].length-1 && grid[node.i][node.j+1]=='1'){// move right
                    queue.offer(new Node(node.i,node.j+1));
                    grid[node.i][node.j+1]='0';
                }
        }    
    }
    private class Node{
        int i;
        int j;
        public Node(int i, int j){
            this.i=i;
            this.j=j;
        }
    }
}

/**
method2: 
DFS: use recursion to explore islands
**/

class Solution {
    public int numIslands(char[][] grid) {
       if(grid==null || grid.length==0 || grid[0].length==0){
           return 0;
       } 
        int count = 0;
        for(int i =0; i<grid.length; i++){
            for(int j = 0; j< grid[0].length; j++){
                if(grid[i][j]=='1'){   //if it is an island, traverse by BFS 
                    count++;
                    traverseDFS(grid, i, j);
                }
            }
        }
        return count;
    }
 //bug: use "||" istead of "&&", enough of this kind of mistakes!!!!!!!!!
    public void traverseDFS(char[][] grid, int i, int j){        
        if(i<0 || j<0 || i>grid.length-1 || j>grid[0].length-1){ //if it is out of bound
            return;
        }
        if(grid[i][j]=='0') return;
        grid[i][j]='0';
        traverseDFS(grid, i+1, j);
        traverseDFS(grid, i-1, j);
        traverseDFS(grid, i, j-1);
        traverseDFS(grid, i, j+1);
    }
}
 /**
 method 3: union find
    1. define a UnionFind class. 
        find(): returns the root parent of x
        connect(a,b): set the root of a to root of b --> can implement path compression in future
        getCount(): return count of root
        setCount(): set the count of root
        
    2. initially count=number of '1', connect if adjacent, count--
    **/

class Solution {
   
   private class UnionFind { 
    int[] id;
    int count;
    //initialize class
    public UnionFind(int n){ 
        id = new int[n];
        for(int i = 0; i<n; i++){
            id[i]=i;
        }
    }
    //find the parent of given node, recursion
    public int find(int n){
        if(id[n]==n) 
           return n;
        else 
            return find(id[n]);
    }
    // connect two node
    public void union(int a, int b){
        if(find(a)!=find(b)){
            //bug here: set a's root parent to b's root parent, not to set a's parent to b's parent
            id[find(a)]=find(b); //
            count--;
        }
    }
    //set count
    public void setCount(int n){
        count = n;
    }
    //get count
    public int getCount(){
        return count;
    }
  }
     public int numIslands(char[][] grid) {
       if(grid==null || grid.length==0 || grid[0].length==0){
           return 0;
       }
       int n = grid.length;
       int m = grid[0].length;
       int num = 0;
       //initialize the array: set every element points to itself
       UnionFind uf = new UnionFind(n*m);
         // count only if there's '1', and use the count for decrement
       for(int i = 0; i< n; i++){
           for(int j = 0; j<m; j++){
               if(grid[i][j]=='1'){
                   num++;
               }
           }
       }
      uf.setCount(num);
    System.out.println("initially, count="+uf.getCount());
         //tricky part: the array index
         //bugs: bound, typo, missing condition:=='1'
      for(int i =0; i<n; i++){
          for(int j = 0; j<m; j++){
              if(grid[i][j]=='1'){
              if(i>0 && grid[i-1][j]=='1'){
                  uf.union(i*m+j, (i-1)*m+j);
              }
              if(j>0 && grid[i][j-1]=='1'){
                  uf.union(i*m+j, i*m+j-1);
              }
               if(j<grid[0].length-1 && grid[i][j+1]=='1'){
                  uf.union(i*m+j, i*m+j+1);
              }
               if(i<grid.length-1 && grid[i+1][j]=='1'){
                  uf.union((i+1)*m+j, i*m+j);
              }
          }
          }
      }
         return uf.getCount();     
     }
}

