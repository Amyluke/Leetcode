Given an array nums of n integers where n > 1,  
return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].
Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).

//version1: divide the array into two halves, iterate the array two times. O(N), 2ms

class Solution {
    /**
    prefix:res[i]=prefixproduct = pre*res[i-1]; 
    suffix:sufixproduct =  sufix*res[i+1]; res[i]=sufix product
    **/
    public int[] productExceptSelf(int[] nums) {
       int[] res = new int[nums.length];
       if(nums==null || nums.length==0) return res;
       int preProduct = 1;
       for(int i = 0; i<nums.length; i++){
           res[i] = preProduct; 
           preProduct*=nums[i];
       }
        int sufixProduct=1;
        for(int i = nums.length-1; i>=0; i--){
            res[i]= sufixProduct*res[i];
            sufixProduct*=nums[i];
        }
        return res;
        
    }
}

//version2: product/nums[i], remember to calculate the number of 0 in the array

class Solution {
    public int[] productExceptSelf(int[] nums) {
       int[] res = new int[nums.length];
       if(nums==null || nums.length==0) return res;
        int count = 0;//calculate if the number of 0 in the array
        int product = 1;
       for(int i:nums){
           if(i==0) {
               count++;
           }
           else product*=i;    
       } 
        for(int i=0; i<nums.length;i++){
            if(count>1) res[i]=0;
            else if(count==1 && nums[i]!=0) res[i]=0;
            else if(nums[i]==0 && count==1) res[i]=product;
            else res[i]=product/nums[i];
        }
        
        return res;
    }
}
