Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

nums: [1,2,3]

Result: [1,2] (of course, [1,3] will also be ok)
Example 2:

nums: [1,2,4,8]

Result: [1,2,4,8]

class Solution {
    //思路卡住。
    //卡住1：最终的list，排序起来nums(i+1) %nums(i) 为0,但在原数组中，需要2层遍历，i%j，来找到需要放进res的数字
    //首先，对于第i个数，找到0-i个数中可以取的最大的lentgh，因为数组第i个数与第j个数之间有间隔，如 1，2，3，5，6，10，15， dp[i]随着第二层遍历而变化，需要比较dp[j]+1与dp[i]的大小
    //确定了坐标后再遍历选取res
  //卡住2：确定了坐标后遍历选取res,两种方式：
    //   第二种，将每一次放入res的数字存为下一次遍历的被除数，temp; 将循环中需要变化的数存为num[i]；将最长subset的length记为n;
    //          f[] 记录的为每一个点的最长subset，当最后一个点放入res之后，将倒数第二个点放进去，此时该点的长度应该与subset减去的长度一样,如果不一样，则会出现下一个取的数并不在最长的subset中，但它可以被前一个数整除。
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> res = new ArrayList();
        if(nums==null || nums.length==0) return res;
        Arrays.sort(nums);
        int[] length = new int[nums.length];
        //  the last index
        int maxIndex=0;
        // the maximum length of the result
        int maxlength=-1;
      
        //initialize: for every element, max length is 1
        for(int i = 0; i<nums.length; i++){
            length[i]=1;
          
        }
        //function:
        for(int i = 0; i<nums.length; i++){
            for (int j = 0; j<i; j++){
                if(nums[i]%nums[j]==0){
                    length[i]=Math.max(length[i],length[j]+1);
                    
                }
            }
            if(maxlength<length[i]){
                maxlength=length[i];
                maxIndex = i;
            }
        }
        int divisor = nums[maxIndex];
        int len = maxlength;
        for(int i = maxIndex;i>=0; i--){
            if(divisor%nums[i]==0 && len == length[i]){
                res.add(nums[i]);
                divisor = nums[i];
                len--;
            }
        }
        return res;
        
        }
    }
    
    class Solution {
    //思路卡住。
    //卡住1：最终的list，排序起来nums(i+1) %nums(i) 为0,但在原数组中，需要遍历2次，i%j，来找到需要放进res的数字
    //首先，对于第i个数，找到0-i个数中可以取的最大的lentgh，因为数组第i个数与第j个数之间有间隔，如 1，2，3，5，6，10，15， dp[i]随着第二层遍历而变化，需要比较dp[j]+1与dp[i]的大小
    //确定了坐标后再遍历选取res
  //卡住2：确定了坐标后遍历选取res,两种方式：
    //   第一种，存一个array将每一个点的最长的子集点前一个点存入。在function中更新每一个点的前级节点，当f[i]<f[j]+1的时候，pre[i]=j，此j就是前级节点。
    
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> res = new ArrayList();
        if(nums==null || nums.length==0) return res;
        Arrays.sort(nums);
        int[] length = new int[nums.length];
        //  the last index
        int maxIndex=0;
        // the maximum length of the result
        int maxlength=-1;
        //use an array to store the pre-index of index i, when it is the longest sequence
        int[] pre = new int[nums.length];
        
        //initialize: for every element, max length is 1
        for(int i = 0; i<nums.length; i++){
            length[i]=1;
            pre[i]=i;
        }
        //function:
        for(int i = 0; i<nums.length; i++){
            for (int j = 0; j<i; j++){
                if(nums[i]%nums[j]==0 && length[i]<length[j]+1){
                    length[i]=length[j]+1;   
                    pre[i]=j;//此时j是i的前级节点
                }
            }
            if(maxlength<length[i]){
                maxlength=length[i];
                maxIndex = i;
            }
        }
       
    //如果pre[i]=-1,则表示该点的前级节点是自己，即到该点只有自己，可以设置为i
   
        res.add(nums[maxIndex]);
        //卡住3，此处调换顺序。先找出前级节点，再加入res。
        while(maxIndex!=pre[maxIndex]){      
            maxIndex = pre[maxIndex];
             res.add(nums[maxIndex]);
        }
        return res;
        
        }
    }

