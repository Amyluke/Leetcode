/**
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.
**/

class Solution {
    public int firstUniqChar(String s) {
        if(s==null||s.length()==0) return -1;
        Map<Character,Integer> map = new HashMap();
        Set<Character> dupSet = new HashSet();
        for(int i = 0; i<s.length(); i++){
            if(map.containsKey(s.charAt(i))){
                dupSet.add(s.charAt(i));
                map.remove(s.charAt(i));
                System.out.println("After remove:"+map.toString());
            }else{
                if(dupSet.contains(s.charAt(i))) continue;
                else map.put(s.charAt(i),i);
        }
    }
        
      if(map.size()==0) return -1;
      int min = Integer.MAX_VALUE;
      for(Character c : map.keySet()){
          if(map.get(c)<min){
              min = map.get(c);
          }
      }
        return min;
    }
}
/**
Version2
**/
class Solution {
    int[] array = new int[26];
    public int firstUniqChar(String s) {
        if(s==null || s.length()==0) return -1;
        for(int i= 0; i<s.length(); i++){
            array[s.charAt(i)-'a']=array[s.charAt(i)-'a']+1;
        }
        for(int i =0; i<s.length();i++){
            if(array[s.charAt(i)-'a']==1) 
                return i;
        }
        return -1;
    }
}
