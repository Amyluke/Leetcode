ShortestWordDistance I&&II&&III

I. Simple Shortest Word Distance
- Two Pointer: Two pointers point to the position of two words respectively. 
              Compare the new position of one word with position of another word.

  Time: O(n), Space: O(1)
  
   public int shortest(String[]words, String word1, String word2) {
        int i1=-1;
        int i2=-1;
        int dist = Integer.MAX_VALUE;
       for(int i=0; i<words.length; i++){
           if(words[i].equals(word1)){
               if(i2!=-1) dist=Math.min(dist, i-i2);
               i1=i;
           }else if(words[i].equals(word2)){
               if(i1!=-1) dist=Math.min(dist, i-i1);
               i2=i;
        }
    System.out.println("dist="+dist);
    }
        return dist;
}

II. Shortest method is called multiple times
O(n), O(n)
因为会多次调用，我们不能每次调用的时候再把这两个单词的下标找出来。
我们可以用一个哈希表，在传入字符串数组时，就把每个单词的下标找出存入表中。
这样当调用最短距离的方法时，我们只要遍历两个单词的下标列表就行了。
具体的比较方法，则类似merge two list，每次比较两个list最小的两个值，得到一个差值。
然后把较小的那个给去掉。因为我们遍历输入数组时是从前往后的，所以下标列表也是有序的。
//     Map<String, List<Integer>> map;
//     public WordDistance(String[] words) {
//         map = new HashMap();
//         for(int i=0; i<words.length; i++){
//             if(map.get(words[i])!=null){
//                 map.get(words[i]).add(i);
//             }else{
//                 List<Integer> list= new ArrayList();
//                 list.add(i);
//                 map.put(words[i],list);
//             }
//         }
//     }
    
//     public int shortest(String word1, String word2) {
//         List<Integer> list1= map.get(word1);
//         List<Integer> list2= map.get(word2);
//         int dist = Integer.MAX_VALUE;
//         for(int i = 0, j=0; i<list1.size() && j<list2.size();){
//             int i1 = list1.get(i),i2=list2.get(j);
//             if(i1<i2){
//                 dist = Math.min(dist, (i2-i1));
//                 i++;
//             }else{
//                 dist = Math.min(dist, (i1-i2));
//                 j++;
//             }
//         }
//         return dist;
//     }
III. if word1 is equal to word2
O(n),O(1)
    int i1 = -1;
      int dist = Integer.MAX_VALUE;
      if(word1.equals(word2)){
          for(int i=0; i<words.length; i++){
           if(!words[i].equals(word1)) continue;
               if(i1 != -1) dist = Math.min(dist, i-i1);
              i1=i;
        }
      }else{
         int i2 = -1;
           for(int i=0; i<words.length; i++){
                if(words[i].equals(word1)){
                    if(i2!=-1) dist = Math.min(dist, i-i2);
                    i1=i;
                 }else if(words[i].equals(word2)){
                    if(i1!=-1) dist = Math.min(dist, i-i1);
                   i2=i;
                }
            }
        }
         return dist;
    }
